buildscript {
	ext {
		springBootVersion = '1.4.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

ext {
	appName = 'tntserver'

	getBuildNumber = {
		File  buildProprotiesFile = new File('src/main/resources/build.properties')
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(buildProprotiesFile))
		return versionProps['info.app.version']
	}
}
version=getBuildNumber()
group 'com.lhmtech.commerce'
jar {
	baseName = "$appName"
	libsDirName = "libs/com/mnit/tnt/${appName}/${version}"
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-neo4j')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-actuator-docs')
	compileOnly('org.projectlombok:lombok')
	compile("com.voodoodyne.jackson.jsog:jackson-jsog:1.1")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
	testCompile("org.spockframework:spock-spring:1.0-groovy-2.4")
	testCompile("org.codehaus.groovy.modules.http-builder:http-builder:0.7.1")
	testCompile("cglib:cglib:3.1")
}

sourceSets {
	integrationSource {
		java { srcDirs = ['src/integration/java'] }
		groovy { srcDirs = ['src/integration/java'] }
		compileClasspath += sourceSets.test.compileClasspath
		runtimeClasspath += sourceSets.test.runtimeClasspath
	}
}

test {
	testLogging {
		afterSuite { desc, result ->
			if (!desc.parent) {
				println "Test result: ${result.resultType} (total ${result.testCount} tests, ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
			}
		}
	}
}

task runIntegrationTest(type: Test, dependsOn: assemble) {
	description = 'Run integration tests'
	outputs.upToDateWhen { false }
	doFirst() {
		def count = 1
		tasks.startIDocker.execute()
		60.times {
			if (!['curl', 'http://localhost:8080/info'].execute().text) {
				println('waiting for applicaiton start ...' + count)
				sleep(1000)
				count++
			}
		}
	}
	testClassesDir = sourceSets.integrationSource.output.classesDir
	classpath = sourceSets.integrationSource.runtimeClasspath
	reports.junitXml.destination = 'build/test-results'
	reports.html.destination = 'build/reports/integrationTests'
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Integration tests result: ${result.resultType} (total ${result.testCount} tests, ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
			tasks.stopIDocker.execute()
		}
	}
}

task startIDocker(dependsOn: assemble) {
	doLast {
		exec {
			commandLine 'cp', jar.archivePath, 'build/tntserver.jar'
		}
		exec {
			commandLine 'docker-compose', '-f', 'integration-docker.yml', 'up', '-d'
		}
	}
}

task stopIDocker() {
	doLast {
		exec {
			commandLine 'docker-compose', '-f', 'integration-docker.yml', 'stop'
			ignoreExitValue true
		}
		exec {
			commandLine 'docker-compose', '-f', 'integration-docker.yml', 'rm', '-f'
			ignoreExitValue true
		}
		exec {
			commandLine 'rm', '-f', 'build/tntserver.jar'
			ignoreExitValue true
		}
	}
}

task startDDocker() {
	doLast {
		exec {
			commandLine 'docker-compose', '-f', 'debugging-docker.yml', 'up', '-d'
		}
	}
}

task stopDDocker() {
	doLast {
		exec {
			commandLine 'docker-compose', '-f', 'debugging-docker.yml', 'stop'
			ignoreExitValue true
		}
		exec {
			commandLine 'docker-compose', '-f', 'debugging-docker.yml', 'rm', '-f'
			ignoreExitValue true
		}
	}
}

task increaseBuildNumber() {
	doLast {
		File  buildProprotiesFile = new File('src/main/resources/build.properties')
		Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(buildProprotiesFile))

		String version = versionProps['info.app.version']
        List<String> versionParts  = version.tokenize('.')
        versionParts[2] = versionParts[2].toInteger() + 1
        String newVersion = versionParts.join('.')
        versionProps['info.app.version'] = newVersion
        versionProps.store(buildProprotiesFile.newWriter(), null)
        println("Build version increase from ${version} to ${newVersion}")
	}
}

task stageReleaseFile() {
	doLast {
		exec {
			commandLine 'mkdir', '-p', 'stage'
			ignoreExitValue true
		}
		exec {
			commandLine 'cp', jar.archivePath, 'stage/'
		}
	}
}

task tagReleaseVersion(dependsOn: assemble) {
	doLast {
		exec {
			commandLine 'git', 'tag', '-a', "${version}", '-m', '"tagged by CI release"'
		}
		exec {
			commandLine 'git', 'push', 'origin', '--tags'
		}
	}
}

springBoot {
	executable = true
}

test.finalizedBy(runIntegrationTest)